/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package hu.bme.mit.papyrus.oslc.adaptor.resources;

import java.net.URI;

import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;

import hu.bme.mit.papyrus.oslc.adaptor.servlet.ServiceProviderCatalogSingleton;
import hu.bme.mit.papyrus.oslc.adaptor.servlet.ServletListener;
import hu.bme.mit.papyrus.oslc.adaptor.util.WhereParam;
import hu.bme.mit.papyrus.oslc.adaptor.PapyrusRequirementProviderConstants;
import hu.bme.mit.papyrus.oslc.adaptor.resources.Person;
import hu.bme.mit.papyrus.oslc.adaptor.resources.Person;
import hu.bme.mit.papyrus.oslc.adaptor.resources.Type;

// Start of user code imports
// End of user code

@OslcNamespace(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE)
@OslcName(PapyrusRequirementProviderConstants.REQUIREMENT)
@OslcResourceShape(title = "Requirement Resource Shape", describes = PapyrusRequirementProviderConstants.TYPE_REQUIREMENT)
public class Requirement extends AbstractResource implements IRequirement {

	private HashSet<Link> elaboratedBy = new HashSet<Link>();
	private HashSet<Link> elaborates = new HashSet<Link>();
	private HashSet<Link> specifiedBy = new HashSet<Link>();
	private HashSet<Link> specifies = new HashSet<Link>();
	private HashSet<Link> affectedBy = new HashSet<Link>();
	private HashSet<Link> trackedBy = new HashSet<Link>();
	private HashSet<Link> implementedBy = new HashSet<Link>();
	private HashSet<Link> validatedBy = new HashSet<Link>();
	private HashSet<Link> satisfiedBy = new HashSet<Link>();
	private HashSet<Link> satisfies = new HashSet<Link>();
	private HashSet<Link> decomposedBy = new HashSet<Link>();
	private HashSet<Link> decomposes = new HashSet<Link>();
	private HashSet<Link> constrainedBy = new HashSet<Link>();
	private HashSet<Link> constrains = new HashSet<Link>();
	private String title;
	private String description;
	private String identifier;
	private String shortTitle;
	private HashSet<String> subject = new HashSet<String>();
	private HashSet<Person> creator = new HashSet<Person>();
	private HashSet<Person> contributor = new HashSet<Person>();
	private Date created;
	private Date modified;
	private HashSet<Type> type = new HashSet<Type>();
	private URI serviceProvider;
	private Link instanceShape = new Link();
	private HashSet<Link> verifiedBy = new HashSet<Link>();
	private HashSet<Link> tracedTo = new HashSet<Link>();
	private HashSet<Link> refinedBy = new HashSet<Link>();
	private HashSet<Link> derivedFrom = new HashSet<Link>();
	private HashSet<Link> derived = new HashSet<Link>();
	private HashSet<Link> master = new HashSet<Link>();

	public Requirement() throws URISyntaxException {
		super();
		// Start of user code constructor1
		this.setServiceProvider(ServiceProviderCatalogSingleton.getServiceProviders(null)[0].getAbout());
		this.setInstanceShape(new Link(new URI(ServletListener.getServicesBase()+"/"+OslcConstants.PATH_RESOURCE_SHAPES
				+ "/" + PapyrusRequirementProviderConstants.PATH_REQUIREMENT)));
		// End of user code
	}

	public Requirement(final URI about) throws URISyntaxException {
		super(about);
		// Start of user code constructor2
		this.setServiceProvider(ServiceProviderCatalogSingleton.getServiceProviders(null)[0].getAbout());
		this.setInstanceShape(new Link(new URI(ServletListener.getServicesBase()+"/"+OslcConstants.PATH_RESOURCE_SHAPES
				+ "/" + PapyrusRequirementProviderConstants.PATH_REQUIREMENT)));
		// End of user code
	}

	public boolean matches(ArrayList<WhereParam> whereParams) {
		int cnt_matches = 0;
		Method method;
		try {

			for (WhereParam whereParam : whereParams) {
				String methodName = "get" + whereParam.property.substring(0, 1).toUpperCase()
						+ whereParam.property.substring(1);
				method = this.getClass().getDeclaredMethod(methodName);
				Object propertyValue;

				propertyValue = method.invoke(this);
				if (whereParam.operator.equals("=")) {
					if (whereParam.value.equals(propertyValue.toString())) {
						cnt_matches++;
					}
				} else if (whereParam.operator.equals("<")) {
					// example Date format: 2016.04.25. 1:32
					if (method.getReturnType() == Date.class) {
						SimpleDateFormat d = new SimpleDateFormat();
						try {
							if (((Date) propertyValue).before(d.parse(whereParam.value))) {
								cnt_matches++;
							}
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					} else {
						if (Integer.parseInt(propertyValue.toString()) < Integer.parseInt(whereParam.value)) {
							cnt_matches++;
						}
					}
				} else if (whereParam.operator.equals(">")) {
					if (method.getReturnType() == Date.class) {
						SimpleDateFormat d = new SimpleDateFormat();
						try {
							if (((Date) propertyValue).after(d.parse(whereParam.value))) {
								cnt_matches++;
							}
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					} else {
						if (Integer.parseInt(propertyValue.toString()) > Integer.parseInt(whereParam.value)) {
							cnt_matches++;
						}
					}
				}

			}
		} catch (NoSuchMethodException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (SecurityException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if (cnt_matches == whereParams.size())
			return true;

		return false;
	}

	public String getPropertiesHTML(ArrayList<String> properties) {
		Method method;
		String propertyValue = "";
		try {
			for (String s : properties) {
				String methodName = s + "ToHtml";
				method = this.getClass().getDeclaredMethod(methodName);

				propertyValue += "<tr><td>" + method.invoke(this) + "</td>";

			}

		} catch (NoSuchMethodException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (SecurityException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return propertyValue;
	}

	public Requirement(Requirement r, ArrayList<String> properties) {
		super();
		setAbout(r.getAbout());
		Method getMethod;
		Method setMethod;
		try {
			for (String s : properties) {
				String methodName = "get" + s.substring(0, 1).toUpperCase() + s.substring(1);
				getMethod = r.getClass().getDeclaredMethod(methodName);
				Object paramPropertyValue;
				paramPropertyValue = getMethod.invoke(r);
				methodName = "set" + s.substring(0, 1).toUpperCase() + s.substring(1);
				setMethod = this.getClass().getDeclaredMethod(methodName, getMethod.getReturnType());
				setMethod.invoke(this, paramPropertyValue);
			}
			if (getAbout() == null || getAbout().toString().isEmpty()) {
				this.setAbout(constructURI("Provider", getIdentifier()));
			}
			this.setServiceProvider(ServiceProviderCatalogSingleton.getServiceProviders(null)[0].getAbout());
			this.setInstanceShape(new Link(new URI(ServletListener.getServicesBase()+"/"+OslcConstants.PATH_RESOURCE_SHAPES
					+ "/" + PapyrusRequirementProviderConstants.PATH_REQUIREMENT)));
		} catch (NoSuchMethodException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (SecurityException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public Requirement(Requirement r, ArrayList<String> properties, ArrayList<String> usedProperties) {
		super();
		setAbout(r.getAbout());
		Method getMethod;
		Method setMethod;
		try {
			for (String s : properties) {
				String methodName = "get" + s.substring(0, 1).toUpperCase() + s.substring(1);
				getMethod = r.getClass().getDeclaredMethod(methodName);
				Object paramPropertyValue;
				paramPropertyValue = getMethod.invoke(r);
				if (usedProperties.contains(s)) {
					methodName = "set" + s.substring(0, 1).toUpperCase() + s.substring(1);
					setMethod = this.getClass().getDeclaredMethod(methodName, getMethod.getReturnType());
					setMethod.invoke(this, paramPropertyValue);
				}
			}
			if (getAbout() == null || getAbout().toString().isEmpty()) {
				this.setAbout(constructURI("Provider", getIdentifier()));
			}
			this.setServiceProvider(ServiceProviderCatalogSingleton.getServiceProviders(null)[0].getAbout());
			this.setInstanceShape(new Link(new URI(ServletListener.getServicesBase()+"/"+OslcConstants.PATH_RESOURCE_SHAPES
					+ "/" + PapyrusRequirementProviderConstants.PATH_REQUIREMENT)));
		} catch (NoSuchMethodException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (SecurityException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public Requirement(Map<String, String> properties) {
		super();
		Method getMethod;
		Method setMethod;
		try {
			for (String s : properties.keySet()) {
				String methodName = "get" + s.substring(0, 1).toUpperCase() + s.substring(1);
				getMethod = this.getClass().getDeclaredMethod(methodName);
				methodName = "set" + s.substring(0, 1).toUpperCase() + s.substring(1);
				setMethod = this.getClass().getDeclaredMethod(methodName, getMethod.getReturnType());
				setMethod.invoke(this, properties.get(s));
			}
			if (getAbout() == null || getAbout().toString().isEmpty()) {
				this.setAbout(constructURI("Provider", getIdentifier()));
			}
			this.setServiceProvider(ServiceProviderCatalogSingleton.getServiceProviders(null)[0].getAbout());
			this.setInstanceShape(new Link(new URI(ServletListener.getServicesBase()+"/"+OslcConstants.PATH_RESOURCE_SHAPES
					+ "/" + PapyrusRequirementProviderConstants.PATH_REQUIREMENT)));
		} catch (NoSuchMethodException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (SecurityException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (URISyntaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public Requirement(Requirement r) throws URISyntaxException {
		super();

		// Start of user code constructor1
		setIdentifier(r.getIdentifier());
		setTitle(r.getTitle());
		setDescription(r.getDescription());
		setAbout(r.getAbout());
		setAffectedBy(r.getAffectedBy());
		setConstrainedBy(r.getConstrainedBy());
		setConstrains(r.getConstrains());
		setContributor(r.getContributor());
		setCreated(r.getCreated());
		setCreator(r.getCreator());
		setDecomposedBy(r.getDecomposedBy());
		setDerived(r.getDerived());
		setDerivedFrom(r.getDerivedFrom());
		setElaboratedBy(r.getElaboratedBy());
		setElaborates(r.getElaborates());
		setImplementedBy(r.getImplementedBy());
		setInstanceShape(r.getInstanceShape());
		setMaster(r.getMaster());
		setModified(r.getModified());
		setRefinedBy(r.getRefinedBy());
		setSatisfiedBy(r.getSatisfiedBy());
		setSatisfies(r.getSatisfies());
		setServiceProvider(r.getServiceProvider());
		setSpecifiedBy(r.getSpecifiedBy());
		setShortTitle(r.getShortTitle());
		setSpecifies(r.getSpecifies());
		setSubject(r.getSubject());
		setTracedTo(r.getTracedTo());
		setTrackedBy(r.getTrackedBy());
		setType(r.getType());
		setTypes(r.getTypes());
		setValidatedBy(r.getValidatedBy());
		setVerifiedBy(r.getVerifiedBy());

		if (getAbout() == null || getAbout().toString().isEmpty()) {
			this.setAbout(constructURI("Provider", getIdentifier()));
		}
		this.setServiceProvider(ServiceProviderCatalogSingleton.getServiceProviders(null)[0].getAbout());
		this.setInstanceShape(new Link(new URI(ServletListener.getServicesBase()+"/"+OslcConstants.PATH_RESOURCE_SHAPES
				+ "/" + PapyrusRequirementProviderConstants.PATH_REQUIREMENT)));
		// End of user code
	}

	public Requirement(final String id, final String requirementId) throws URISyntaxException {
		this(constructURI(id, requirementId));
		// Start of user code constructor3
		this.setServiceProvider(ServiceProviderCatalogSingleton.getServiceProviders(null)[0].getAbout());
		this.setInstanceShape(new Link(new URI(ServletListener.getServicesBase()+"/"+OslcConstants.PATH_RESOURCE_SHAPES
				+ "/" + PapyrusRequirementProviderConstants.PATH_REQUIREMENT)));
		// End of user code
	}

	public static URI constructURI(final String id, final String requirementId) {
		String basePath = ServletListener.getServicesBase();
		Map<String, Object> pathParameters = new HashMap<String, Object>();
		pathParameters.put("id", id);
		pathParameters.put("requirementId", requirementId);
		String instanceURI = "serviceProviders/RequirementService{id}/resources/requirements/{requirementId}";

		final UriBuilder builder = UriBuilder.fromUri(basePath);
		return builder.path(instanceURI).buildFromMap(pathParameters);
	}

	public static Link constructLink(final String id, final String requirementId, final String label) {
		return new Link(constructURI(id, requirementId), label);
	}

	public static Link constructLink(final String id, final String requirementId) {
		return new Link(constructURI(id, requirementId));
	}

	public String toString() {
		return toString(false);
	}

	public String toString(boolean asLocalResource) {
		String result = "";
		// Start of user code toString_init
		// End of user code

		if (asLocalResource) {
			result = result
					+ "{a Local Requirement Resource} - update Requirement.toString() to present resource as desired.";
			// Start of user code toString_bodyForLocalResource
			// End of user code
		} else {
			result = getAbout().toString();
		}

		// Start of user code toString_finalize
		// End of user code

		return result;
	}

	public String toHtml() {
		return toHtml(false);
	}

	public String toHtml(boolean asLocalResource) {
		String result = "";
		// Start of user code toHtml_init
		// End of user code

		if (asLocalResource) {
			result = toString(true);
			// Start of user code toHtml_bodyForLocalResource
			// End of user code
		} else {
			result = "<a href=\"" + getAbout() + "\">" + toString() + "</a>";
		}

		// Start of user code toHtml_finalize
		// End of user code

		return result;
	}

	public void addElaboratedBy(final Link elaboratedBy) {
		this.elaboratedBy.add(elaboratedBy);
	}

	public void addElaborates(final Link elaborates) {
		this.elaborates.add(elaborates);
	}

	public void addSpecifiedBy(final Link specifiedBy) {
		this.specifiedBy.add(specifiedBy);
	}

	public void addSpecifies(final Link specifies) {
		this.specifies.add(specifies);
	}

	public void addAffectedBy(final Link affectedBy) {
		this.affectedBy.add(affectedBy);
	}

	public void addTrackedBy(final Link trackedBy) {
		this.trackedBy.add(trackedBy);
	}

	public void addImplementedBy(final Link implementedBy) {
		this.implementedBy.add(implementedBy);
	}

	public void addValidatedBy(final Link validatedBy) {
		this.validatedBy.add(validatedBy);
	}

	public void addSatisfiedBy(final Link satisfiedBy) {
		this.satisfiedBy.add(satisfiedBy);
	}

	public void addSatisfies(final Link satisfies) {
		this.satisfies.add(satisfies);
	}

	public void addDecomposedBy(final Link decomposedBy) {
		this.decomposedBy.add(decomposedBy);
	}

	public void addDecomposes(final Link decomposes) {
		this.decomposes.add(decomposes);
	}

	public void addConstrainedBy(final Link constrainedBy) {
		this.constrainedBy.add(constrainedBy);
	}

	public void addConstrains(final Link constrains) {
		this.constrains.add(constrains);
	}

	public void addSubject(final String subject) {
		this.subject.add(subject);
	}

	public void addCreator(final Person creator) {
		this.creator.add(creator);
	}

	public void addContributor(final Person contributor) {
		this.contributor.add(contributor);
	}

	public void addType(final Type type) {
		this.type.add(type);
	}

	public void addVerifiedBy(final Link verifiedBy) {
		this.verifiedBy.add(verifiedBy);
	}

	public void addTracedTo(final Link tracedTo) {
		this.tracedTo.add(tracedTo);
	}

	public void addRefinedBy(final Link refinedBy) {
		this.refinedBy.add(refinedBy);
	}
	
	public void addMaster(final Link master) {
		this.master.add(master);
	}

	public void addDerivedFrom(final Link derivedFrom) {
		this.derivedFrom.add(derivedFrom);
	}

	public void addDerived(final Link derived) {
		this.derived.add(derived);
	}

	@OslcName("elaboratedBy")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "elaboratedBy")
	@OslcDescription("The subject is elaborated by the object. For example, a user requirement is elaborated by use case. ")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getElaboratedBy() {
		return elaboratedBy;
	}

	@OslcName("elaborates")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "elaborates")
	@OslcDescription("The object is elaborated by the subject.")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getElaborates() {
		return elaborates;
	}

	@OslcName("specifiedBy")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "specifiedBy")
	@OslcDescription("The subject is specified by the object. For example, a requirement is elaborated by a model element .")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getSpecifiedBy() {
		return specifiedBy;
	}

	@OslcName("specifies")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "specifies")
	@OslcDescription("The object is specified by the subject.")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getSpecifies() {
		return specifies;
	}

	@OslcName("affectedBy")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "affectedBy")
	@OslcDescription("Requirement is affected by a resource, such as a defect or issue.")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getAffectedBy() {
		return affectedBy;
	}

	@OslcName("trackedBy")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "trackedBy")
	@OslcDescription("Resource, such as a change request, which tracks this requirement.")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getTrackedBy() {
		return trackedBy;
	}

	@OslcName("implementedBy")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "implementedBy")
	@OslcDescription("Resource, such as a change request, which implements this requirement.")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getImplementedBy() {
		return implementedBy;
	}

	@OslcName("validatedBy")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "validatedBy")
	@OslcDescription("Resource, such as a test case, which validates this requirement.")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getValidatedBy() {
		return validatedBy;
	}

	@OslcName("satisfiedBy")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "satisfiedBy")
	@OslcDescription("The subject is satisfied by the object. For example, a user requirement is satisfied by a system requirement. ")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getSatisfiedBy() {
		return satisfiedBy;
	}

	@OslcName("satisfies")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "satisfies")
	@OslcDescription("The object is satisfied by the subject.")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getSatisfies() {
		return satisfies;
	}

	@OslcName("decomposedBy")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "decomposedBy")
	@OslcDescription("The subject is decomposed by the object. For example, a system requirement is decomposed into a collection of system requirements.")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getDecomposedBy() {
		return decomposedBy;
	}

	@OslcName("decomposes")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "decomposes")
	@OslcDescription("The object is decomposed by the subject.")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getDecomposes() {
		return decomposes;
	}

	@OslcName("constrainedBy")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "constrainedBy")
	@OslcDescription("The subject is constrained by the object. For example, a functional requirement is constrained by a safety requirement.")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getConstrainedBy() {
		return constrainedBy;
	}

	@OslcName("constrains")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "constrains")
	@OslcDescription("The object is constrained by the subject.")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getConstrains() {
		return constrains;
	}

	@OslcName("title")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.DUBLIN_CORE_NAMSPACE + "title")
	@OslcDescription("Title of the resource represented as rich text in XHTML content. SHOULD include only content that is valid inside an XHTML <span> element. ")
	@OslcOccurs(Occurs.ExactlyOne)
	@OslcValueType(ValueType.XMLLiteral)
	@OslcReadOnly(false)
	@OslcTitle("")
	public String getTitle() {
		return title;
	}

	@OslcName("description")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.DUBLIN_CORE_NAMSPACE + "description")
	@OslcDescription("Descriptive text about resource represented as rich text in XHTML content. SHOULD include only content that is valid and suitable inside an XHTML <div> element. ")
	@OslcOccurs(Occurs.ZeroOrOne)
	@OslcValueType(ValueType.XMLLiteral)
	@OslcReadOnly(false)
	@OslcTitle("")
	public String getDescription() {
		return description;
	}

	@OslcName("identifier")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.DUBLIN_CORE_NAMSPACE + "identifier")
	@OslcDescription("A unique identifier for a resource. Typically read-only and assigned by the service provider when a resource is created. Not typically intended for end-user display.")
	@OslcOccurs(Occurs.ExactlyOne)
	@OslcValueType(ValueType.String)
	@OslcReadOnly(true)
	@OslcTitle("")
	public String getIdentifier() {
		return identifier;
	}

	@OslcName("shortTitle")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.OSLC_CORE_NAMSPACE + "shortTitle")
	@OslcDescription("Shorter form of dcterms:title for the resource represented as rich text in XHTML content. SHOULD include only content that is valid inside an XHTML <span> element.")
	@OslcOccurs(Occurs.ZeroOrOne)
	@OslcValueType(ValueType.XMLLiteral)
	@OslcReadOnly(false)
	@OslcTitle("")
	public String getShortTitle() {
		return shortTitle;
	}

	@OslcName("subject")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.DUBLIN_CORE_NAMSPACE + "subject")
	@OslcDescription("Tag or keyword for a resource. Each occurrence of a dcterms:subject property denotes an additional tag for the resource.")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.String)
	@OslcReadOnly(false)
	@OslcTitle("")
	public HashSet<String> getSubject() {
		return subject;
	}

	@OslcName("creator")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.DUBLIN_CORE_NAMSPACE + "creator")
	@OslcDescription("Creator or creators of resource (reference: Dublin Core). It is likely that the target resource will be a foaf:Person but that is not necessarily the case.")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.LocalResource)
	@OslcRange({ PapyrusRequirementProviderConstants.TYPE_PERSON })
	@OslcReadOnly(false)
	@OslcTitle("")
	public HashSet<Person> getCreator() {
		return creator;
	}

	@OslcName("contributor")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.DUBLIN_CORE_NAMSPACE + "contributor")
	@OslcDescription("Contributor or contributors to the resource. It is likely that the target resource will be a foaf:Person but that is not necessarily the case. ")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.LocalResource)
	@OslcRange({ PapyrusRequirementProviderConstants.TYPE_PERSON })
	@OslcReadOnly(false)
	@OslcTitle("")
	public HashSet<Person> getContributor() {
		return contributor;
	}

	@OslcName("created")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.DUBLIN_CORE_NAMSPACE + "created")
	@OslcDescription("Timestamp of resource creation")
	@OslcOccurs(Occurs.ZeroOrOne)
	@OslcValueType(ValueType.DateTime)
	@OslcReadOnly(true)
	@OslcTitle("")
	public Date getCreated() {
		return created;
	}

	@OslcName("modified")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.DUBLIN_CORE_NAMSPACE + "modified")
	@OslcDescription("Timestamp last latest resource modification")
	@OslcOccurs(Occurs.ZeroOrOne)
	@OslcValueType(ValueType.DateTime)
	@OslcReadOnly(true)
	@OslcTitle("")
	public Date getModified() {
		return modified;
	}

	@OslcName("type")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.DUBLIN_CORE_NAMSPACE + "type")
	@OslcDescription("A short string representation for the type, example 'Defect'.")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.LocalResource)
	@OslcRange({ PapyrusRequirementProviderConstants.TYPE_TYPE })
	@OslcReadOnly(false)
	@OslcTitle("")
	public HashSet<Type> getType() {
		return type;
	}

	@OslcName("serviceProvider")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.OSLC_CORE_NAMSPACE + "serviceProvider")
	@OslcDescription("A link to the resource's OSLC Service Provider. There may be cases when the subject resource is available from a service provider that implements multiple domain specifications, which could result in multiple values for this property. ")
	@OslcOccurs(Occurs.ExactlyOne)
	@OslcReadOnly(false)
	@OslcTitle("")
	public URI getServiceProvider() {
		return serviceProvider;
	}

	@OslcName("instanceShape")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.OSLC_CORE_NAMSPACE + "instanceShape")
	@OslcDescription("The URI of a Resource Shape that describes the possible properties, occurrence, value types, allowed values and labels. This shape information is useful in displaying the subject resource as well as guiding clients in performing modifications. Instance shapes may be specific to the authenticated user associated with the request that retrieved the resource, the current state of the resource and other factors and thus should not be cached.")
	@OslcOccurs(Occurs.ZeroOrOne)
	@OslcValueType(ValueType.Resource)
	@OslcReadOnly(false)
	@OslcTitle("")
	public Link getInstanceShape() {
		return instanceShape;
	}

	@OslcName("verifiedBy")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "verifiedBy")
	@OslcDescription("TODO: verifiedBy Description")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getVerifiedBy() {
		return verifiedBy;
	}

	@OslcName("tracedTo")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "tracedTo")
	@OslcDescription("TODO: tracedTo Description")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getTracedTo() {
		return tracedTo;
	}

	@OslcName("refinedBy")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "refinedBy")
	@OslcDescription("TODO: refinedBy Description")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getRefinedBy() {
		return refinedBy;
	}

	@OslcName("master")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "master")
	@OslcDescription("The subject is master of the object")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getMaster() {
		return master;
	}
	
	
	@OslcName("derivedFrom")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "derivedFrom")
	@OslcDescription("The subject is derived from the object")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getDerivedFrom() {
		return derivedFrom;
	}

	@OslcName("derived")
	@OslcPropertyDefinition(PapyrusRequirementProviderConstants.REQUIREMENT_MANAGEMENT_NAMSPACE + "derived")
	@OslcDescription("The object is derived from the subject.")
	@OslcOccurs(Occurs.ZeroOrMany)
	@OslcValueType(ValueType.Resource)
	@OslcRepresentation(Representation.Reference)
	@OslcReadOnly(false)
	public HashSet<Link> getDerived() {
		return derived;
	}

	public void setElaboratedBy(final HashSet<Link> elaboratedBy) {
		this.elaboratedBy.clear();
		if (elaboratedBy != null) {
			this.elaboratedBy.addAll(elaboratedBy);
		}

	}

	public void setElaborates(final HashSet<Link> elaborates) {
		this.elaborates.clear();
		if (elaborates != null) {
			this.elaborates.addAll(elaborates);
		}

	}

	public void setSpecifiedBy(final HashSet<Link> specifiedBy) {
		this.specifiedBy.clear();
		if (specifiedBy != null) {
			this.specifiedBy.addAll(specifiedBy);
		}

	}

	public void setSpecifies(final HashSet<Link> specifies) {
		this.specifies.clear();
		if (specifies != null) {
			this.specifies.addAll(specifies);
		}

	}

	public void setAffectedBy(final HashSet<Link> affectedBy) {
		this.affectedBy.clear();
		if (affectedBy != null) {
			this.affectedBy.addAll(affectedBy);
		}

	}

	public void setTrackedBy(final HashSet<Link> trackedBy) {
		this.trackedBy.clear();
		if (trackedBy != null) {
			this.trackedBy.addAll(trackedBy);
		}

	}

	public void setImplementedBy(final HashSet<Link> implementedBy) {
		this.implementedBy.clear();
		if (implementedBy != null) {
			this.implementedBy.addAll(implementedBy);
		}

	}

	public void setValidatedBy(final HashSet<Link> validatedBy) {
		this.validatedBy.clear();
		if (validatedBy != null) {
			this.validatedBy.addAll(validatedBy);
		}

	}

	public void setSatisfiedBy(final HashSet<Link> satisfiedBy) {
		this.satisfiedBy.clear();
		if (satisfiedBy != null) {
			this.satisfiedBy.addAll(satisfiedBy);
		}

	}

	public void setSatisfies(final HashSet<Link> satisfies) {
		this.satisfies.clear();
		if (satisfies != null) {
			this.satisfies.addAll(satisfies);
		}

	}

	public void setDecomposedBy(final HashSet<Link> decomposedBy) {
		this.decomposedBy.clear();
		if (decomposedBy != null) {
			this.decomposedBy.addAll(decomposedBy);
		}

	}

	public void setDecomposes(final HashSet<Link> decomposes) {
		this.decomposes.clear();
		if (decomposes != null) {
			this.decomposes.addAll(decomposes);
		}

	}

	public void setConstrainedBy(final HashSet<Link> constrainedBy) {
		this.constrainedBy.clear();
		if (constrainedBy != null) {
			this.constrainedBy.addAll(constrainedBy);
		}

	}

	public void setConstrains(final HashSet<Link> constrains) {
		this.constrains.clear();
		if (constrains != null) {
			this.constrains.addAll(constrains);
		}

	}

	public void setTitle(final String title) {
		this.title = title;
	}

	public void setDescription(final String description) {
		this.description = description;
	}

	public void setIdentifier(final String identifier) {
		this.identifier = identifier;
	}

	public void setShortTitle(final String shortTitle) {
		this.shortTitle = shortTitle;
	}

	public void setSubject(final HashSet<String> subject) {
		this.subject.clear();
		if (subject != null) {
			this.subject.addAll(subject);
		}

	}

	public void setCreator(final HashSet<Person> creator) {
		this.creator.clear();
		if (creator != null) {
			this.creator.addAll(creator);
		}

	}

	public void setContributor(final HashSet<Person> contributor) {
		this.contributor.clear();
		if (contributor != null) {
			this.contributor.addAll(contributor);
		}

	}

	public void setCreated(final Date created) {
		this.created = created;
	}

	public void setModified(final Date modified) {
		this.modified = modified;
	}

	public void setType(final HashSet<Type> type) {
		this.type.clear();
		if (type != null) {
			this.type.addAll(type);
		}

	}

	public void setServiceProvider(final URI serviceProvider) {
		this.serviceProvider = serviceProvider;
	}

	public void setInstanceShape(final Link instanceShape) {
		this.instanceShape = instanceShape;
	}

	public void setVerifiedBy(final HashSet<Link> verifiedBy) {
		this.verifiedBy.clear();
		if (verifiedBy != null) {
			this.verifiedBy.addAll(verifiedBy);
		}

	}

	public void setTracedTo(final HashSet<Link> tracedTo) {
		this.tracedTo.clear();
		if (tracedTo != null) {
			this.tracedTo.addAll(tracedTo);
		}

	}

	public void setRefinedBy(final HashSet<Link> refinedBy) {
		this.refinedBy.clear();
		if (refinedBy != null) {
			this.refinedBy.addAll(refinedBy);
		}

	}
	
	public void setMaster(final HashSet<Link> master) {
		this.master.clear();
		if (master != null) {
			this.master.addAll(master);
		}

	}

	public void setDerivedFrom(final HashSet<Link> derivedFrom) {
		this.derivedFrom.clear();
		if (derivedFrom != null) {
			this.derivedFrom.addAll(derivedFrom);
		}

	}

	public void setDerived(final HashSet<Link> derived) {
		this.derived.clear();
		if (derived != null) {
			this.derived.addAll(derived);
		}

	}

	static public String elaboratedByToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:elaboratedByToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"elaboratedBy\">elaboratedBy: </LABEL>";

		// Start of user code "Mid:elaboratedByToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:elaboratedByToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String elaboratedByToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:elaboratedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		s = s + "<label for=\"elaboratedBy\">elaboratedBy: </LABEL>";

		// Start of user code "Mid:elaboratedByToHtmlForCreation1(...final
		// String id)"
		// End of user code
		s = s + "<input name=\"elaboratedBy\" type=\"text\" style=\"width: 400px\" id=\"elaboratedBy\" >";
		// Start of user code "Finalize:elaboratedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String elaboratesToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:elaboratesToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"elaborates\">elaborates: </LABEL>";

		// Start of user code "Mid:elaboratesToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:elaboratesToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String elaboratesToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:elaboratesToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"elaborates\">elaborates: </LABEL>";

		// Start of user code "Mid:elaboratesToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"elaborates\" type=\"text\" style=\"width: 400px\" id=\"elaborates\" >";
		// Start of user code "Finalize:elaboratesToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String specifiedByToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:specifiedByToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"specifiedBy\">specifiedBy: </LABEL>";

		// Start of user code "Mid:specifiedByToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:specifiedByToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String specifiedByToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:specifiedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		s = s + "<label for=\"specifiedBy\">specifiedBy: </LABEL>";

		// Start of user code "Mid:specifiedByToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"specifiedBy\" type=\"text\" style=\"width: 400px\" id=\"specifiedBy\" >";
		// Start of user code "Finalize:specifiedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String specifiesToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:specifiesToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"specifies\">specifies: </LABEL>";

		// Start of user code "Mid:specifiesToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:specifiesToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String specifiesToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:specifiesToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"specifies\">specifies: </LABEL>";

		// Start of user code "Mid:specifiesToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"specifies\" type=\"text\" style=\"width: 400px\" id=\"specifies\" >";
		// Start of user code "Finalize:specifiesToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String affectedByToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:affectedByToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"affectedBy\">affectedBy: </LABEL>";

		// Start of user code "Mid:affectedByToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:affectedByToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String affectedByToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:affectedByToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"affectedBy\">affectedBy: </LABEL>";

		// Start of user code "Mid:affectedByToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"affectedBy\" type=\"text\" style=\"width: 400px\" id=\"affectedBy\" >";
		// Start of user code "Finalize:affectedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String trackedByToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:trackedByToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"trackedBy\">trackedBy: </LABEL>";

		// Start of user code "Mid:trackedByToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:trackedByToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String trackedByToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:trackedByToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"trackedBy\">trackedBy: </LABEL>";

		// Start of user code "Mid:trackedByToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"trackedBy\" type=\"text\" style=\"width: 400px\" id=\"trackedBy\" >";
		// Start of user code "Finalize:trackedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String implementedByToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:implementedByToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"implementedBy\">implementedBy: </LABEL>";

		// Start of user code "Mid:implementedByToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:implementedByToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String implementedByToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:implementedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		s = s + "<label for=\"implementedBy\">implementedBy: </LABEL>";

		// Start of user code "Mid:implementedByToHtmlForCreation1(...final
		// String id)"
		// End of user code
		s = s + "<input name=\"implementedBy\" type=\"text\" style=\"width: 400px\" id=\"implementedBy\" >";
		// Start of user code "Finalize:implementedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String validatedByToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:validatedByToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"validatedBy\">validatedBy: </LABEL>";

		// Start of user code "Mid:validatedByToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:validatedByToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String validatedByToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:validatedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		s = s + "<label for=\"validatedBy\">validatedBy: </LABEL>";

		// Start of user code "Mid:validatedByToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"validatedBy\" type=\"text\" style=\"width: 400px\" id=\"validatedBy\" >";
		// Start of user code "Finalize:validatedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String satisfiedByToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:satisfiedByToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"satisfiedBy\">satisfiedBy: </LABEL>";

		// Start of user code "Mid:satisfiedByToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:satisfiedByToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String satisfiedByToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:satisfiedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		s = s + "<label for=\"satisfiedBy\">satisfiedBy: </LABEL>";

		// Start of user code "Mid:satisfiedByToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"satisfiedBy\" type=\"text\" style=\"width: 400px\" id=\"satisfiedBy\" >";
		// Start of user code "Finalize:satisfiedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String satisfiesToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:satisfiesToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"satisfies\">satisfies: </LABEL>";

		// Start of user code "Mid:satisfiesToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:satisfiesToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String satisfiesToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:satisfiesToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"satisfies\">satisfies: </LABEL>";

		// Start of user code "Mid:satisfiesToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"satisfies\" type=\"text\" style=\"width: 400px\" id=\"satisfies\" >";
		// Start of user code "Finalize:satisfiesToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String decomposedByToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:decomposedByToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"decomposedBy\">decomposedBy: </LABEL>";

		// Start of user code "Mid:decomposedByToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:decomposedByToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String decomposedByToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:decomposedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		s = s + "<label for=\"decomposedBy\">decomposedBy: </LABEL>";

		// Start of user code "Mid:decomposedByToHtmlForCreation1(...final
		// String id)"
		// End of user code
		s = s + "<input name=\"decomposedBy\" type=\"text\" style=\"width: 400px\" id=\"decomposedBy\" >";
		// Start of user code "Finalize:decomposedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String decomposesToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:decomposesToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"decomposes\">decomposes: </LABEL>";

		// Start of user code "Mid:decomposesToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:decomposesToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String decomposesToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:decomposesToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"decomposes\">decomposes: </LABEL>";

		// Start of user code "Mid:decomposesToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"decomposes\" type=\"text\" style=\"width: 400px\" id=\"decomposes\" >";
		// Start of user code "Finalize:decomposesToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String constrainedByToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:constrainedByToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"constrainedBy\">constrainedBy: </LABEL>";

		// Start of user code "Mid:constrainedByToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:constrainedByToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String constrainedByToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:constrainedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		s = s + "<label for=\"constrainedBy\">constrainedBy: </LABEL>";

		// Start of user code "Mid:constrainedByToHtmlForCreation1(...final
		// String id)"
		// End of user code
		s = s + "<input name=\"constrainedBy\" type=\"text\" style=\"width: 400px\" id=\"constrainedBy\" >";
		// Start of user code "Finalize:constrainedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String constrainsToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:constrainsToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"constrains\">constrains: </LABEL>";

		// Start of user code "Mid:constrainsToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:constrainsToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String constrainsToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:constrainsToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"constrains\">constrains: </LABEL>";

		// Start of user code "Mid:constrainsToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"constrains\" type=\"text\" style=\"width: 400px\" id=\"constrains\" >";
		// Start of user code "Finalize:constrainsToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String titleToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:titleToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"title\">title: </LABEL>";

		// Start of user code "Mid:titleToHtmlForCreation(...)"
		// End of user code

		s = s + "<input name=\"title\" type=\"text\" style=\"width: 400px\" id=\"title\" >";
		// Start of user code "Finalize:titleToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String titleToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:titleToHtmlForCreation1(...final String id)"
		// End of user code

		s = s + "<label for=\"title\">title: </LABEL>";

		// Start of user code "Mid:titleToHtmlForCreation1(...final String id)"
		// End of user code

		s = s + "<input name=\"title\" type=\"text\" style=\"width: 400px\" id=\"title\" >";
		// Start of user code "Finalize:titleToHtmlForCreation1(...final String
		// id)"
		// End of user code

		return s;
	}

	static public String descriptionToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:descriptionToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"description\">description: </LABEL>";

		// Start of user code "Mid:descriptionToHtmlForCreation(...)"
		// End of user code

		s = s + "<input name=\"description\" type=\"text\" style=\"width: 400px\" id=\"description\" >";
		// Start of user code "Finalize:descriptionToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String descriptionToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:descriptionToHtmlForCreation1(...final
		// String id)"
		// End of user code

		s = s + "<label for=\"description\">description: </LABEL>";

		// Start of user code "Mid:descriptionToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<input name=\"description\" type=\"text\" style=\"width: 400px\" id=\"description\" >";
		// Start of user code "Finalize:descriptionToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String identifierToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:identifierToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"identifier\">identifier: </LABEL>";

		// Start of user code "Mid:identifierToHtmlForCreation(...)"
		// End of user code

		s = s + "<input name=\"identifier\" type=\"text\" style=\"width: 400px\" id=\"identifier\" >";
		// Start of user code "Finalize:identifierToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String identifierToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:identifierToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"identifier\">identifier: </LABEL>";

		// Start of user code "Mid:identifierToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<input name=\"identifier\" type=\"text\" style=\"width: 400px\" id=\"identifier\" >";
		// Start of user code "Finalize:identifierToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String shortTitleToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:shortTitleToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"shortTitle\">shortTitle: </LABEL>";

		// Start of user code "Mid:shortTitleToHtmlForCreation(...)"
		// End of user code

		s = s + "<input name=\"shortTitle\" type=\"text\" style=\"width: 400px\" id=\"shortTitle\" >";
		// Start of user code "Finalize:shortTitleToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String shortTitleToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:shortTitleToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"shortTitle\">shortTitle: </LABEL>";

		// Start of user code "Mid:shortTitleToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<input name=\"shortTitle\" type=\"text\" style=\"width: 400px\" id=\"shortTitle\" >";
		// Start of user code "Finalize:shortTitleToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String subjectToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:subjectToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"subject\">subject: </LABEL>";

		// Start of user code "Mid:subjectToHtmlForCreation(...)"
		// End of user code

		s = s + "<input name=\"subject\" type=\"text\" style=\"width: 400px\" id=\"subject\" >";
		// Start of user code "Finalize:subjectToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String subjectToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:subjectToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"subject\">subject: </LABEL>";

		// Start of user code "Mid:subjectToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<input name=\"subject\" type=\"text\" style=\"width: 400px\" id=\"subject\" >";
		// Start of user code "Finalize:subjectToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String creatorToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:creatorToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"creator\">creator: </LABEL>";

		// Start of user code "Mid:creatorToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:creatorToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String creatorToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:creatorToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"creator\">creator: </LABEL>";

		// Start of user code "Mid:creatorToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"creator\" type=\"text\" style=\"width: 400px\" id=\"creator\" >";
		// Start of user code "Finalize:creatorToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String contributorToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:contributorToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"contributor\">contributor: </LABEL>";

		// Start of user code "Mid:contributorToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:contributorToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String contributorToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:contributorToHtmlForCreation1(...final
		// String id)"
		// End of user code

		s = s + "<label for=\"contributor\">contributor: </LABEL>";

		// Start of user code "Mid:contributorToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"contributor\" type=\"text\" style=\"width: 400px\" id=\"contributor\" >";
		// Start of user code "Finalize:contributorToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String createdToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:createdToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"created\">created: </LABEL>";

		// Start of user code "Mid:createdToHtmlForCreation(...)"
		// End of user code

		s = s + "<input name=\"created\" type=\"text\" style=\"width: 400px\" id=\"created\" >";
		// Start of user code "Finalize:createdToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String createdToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:createdToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"created\">created: </LABEL>";

		// Start of user code "Mid:createdToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<input name=\"created\" type=\"text\" style=\"width: 400px\" id=\"created\" >";
		// Start of user code "Finalize:createdToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String modifiedToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:modifiedToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"modified\">modified: </LABEL>";

		// Start of user code "Mid:modifiedToHtmlForCreation(...)"
		// End of user code

		s = s + "<input name=\"modified\" type=\"text\" style=\"width: 400px\" id=\"modified\" >";
		// Start of user code "Finalize:modifiedToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String modifiedToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:modifiedToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"modified\">modified: </LABEL>";

		// Start of user code "Mid:modifiedToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<input name=\"modified\" type=\"text\" style=\"width: 400px\" id=\"modified\" >";
		// Start of user code "Finalize:modifiedToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String typeToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:typeToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"type\">type: </LABEL>";

		// Start of user code "Mid:typeToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:typeToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String typeToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:typeToHtmlForCreation1(...final String id)"
		// End of user code

		s = s + "<label for=\"type\">type: </LABEL>";

		// Start of user code "Mid:typeToHtmlForCreation1(...final String id)"
		// End of user code
		s = s + "<input name=\"type\" type=\"text\" style=\"width: 400px\" id=\"type\" >";
		// Start of user code "Finalize:typeToHtmlForCreation1(...final String
		// id)"
		// End of user code

		return s;
	}

	static public String serviceProviderToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:serviceProviderToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"serviceProvider\">serviceProvider: </LABEL>";

		// Start of user code "Mid:serviceProviderToHtmlForCreation(...)"
		// End of user code

		s = s + "<input name=\"serviceProvider\" type=\"text\" style=\"width: 400px\" id=\"serviceProvider\" >";
		// Start of user code "Finalize:serviceProviderToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String serviceProviderToHtmlForCreation1(final HttpServletRequest httpServletRequest,
			final String id) {
		String s = "";

		// Start of user code "Init:serviceProviderToHtmlForCreation1(...final
		// String id)"
		// End of user code

		s = s + "<label for=\"serviceProvider\">serviceProvider: </LABEL>";

		// Start of user code "Mid:serviceProviderToHtmlForCreation1(...final
		// String id)"
		// End of user code

		s = s + "<input name=\"serviceProvider\" type=\"text\" style=\"width: 400px\" id=\"serviceProvider\" >";
		// Start of user code
		// "Finalize:serviceProviderToHtmlForCreation1(...final String id)"
		// End of user code

		return s;
	}

	static public String instanceShapeToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:instanceShapeToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"instanceShape\">instanceShape: </LABEL>";

		// Start of user code "Mid:instanceShapeToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:instanceShapeToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String instanceShapeToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:instanceShapeToHtmlForCreation1(...final
		// String id)"
		// End of user code

		s = s + "<label for=\"instanceShape\">instanceShape: </LABEL>";

		// Start of user code "Mid:instanceShapeToHtmlForCreation1(...final
		// String id)"
		// End of user code
		s = s + "<input name=\"instanceShape\" type=\"text\" style=\"width: 400px\" id=\"instanceShape\" >";
		// Start of user code "Finalize:instanceShapeToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String verifiedByToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:verifiedByToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"verifiedBy\">verifiedBy: </LABEL>";

		// Start of user code "Mid:verifiedByToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:verifiedByToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String verifiedByToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:verifiedByToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"verifiedBy\">verifiedBy: </LABEL>";

		// Start of user code "Mid:verifiedByToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"verifiedBy\" type=\"text\" style=\"width: 400px\" id=\"verifiedBy\" >";
		// Start of user code "Finalize:verifiedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String tracedToToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:tracedToToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"tracedTo\">tracedTo: </LABEL>";

		// Start of user code "Mid:tracedToToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:tracedToToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String tracedToToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:tracedToToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"tracedTo\">tracedTo: </LABEL>";

		// Start of user code "Mid:tracedToToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"tracedTo\" type=\"text\" style=\"width: 400px\" id=\"tracedTo\" >";
		// Start of user code "Finalize:tracedToToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String refinedByToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:refinedByToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"refinedBy\">refinedBy: </LABEL>";

		// Start of user code "Mid:refinedByToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:refinedByToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String refinedByToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:refinedByToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"refinedBy\">refinedBy: </LABEL>";

		// Start of user code "Mid:refinedByToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"refinedBy\" type=\"text\" style=\"width: 400px\" id=\"refinedBy\" >";
		// Start of user code "Finalize:refinedByToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}
	
	static public String derivedFromToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:derivedFromToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"derivedFrom\">derivedFrom: </LABEL>";

		// Start of user code "Mid:derivedFromToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:derivedFromToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String masterToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:derivedFromToHtmlForCreation1(...final
		// String id)"
		// End of user code

		s = s + "<label for=\"master\">master: </LABEL>";

		// Start of user code "Mid:derivedFromToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"master\" type=\"text\" style=\"width: 400px\" id=\"master\" >";
		// Start of user code "Finalize:derivedFromToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String masterToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:derivedFromToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"master\">master: </LABEL>";

		// Start of user code "Mid:derivedFromToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:derivedFromToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String derivedFromToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:derivedFromToHtmlForCreation1(...final
		// String id)"
		// End of user code

		s = s + "<label for=\"derivedFrom\">derivedFrom: </LABEL>";

		// Start of user code "Mid:derivedFromToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"derivedFrom\" type=\"text\" style=\"width: 400px\" id=\"derivedFrom\" >";
		// Start of user code "Finalize:derivedFromToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	static public String derivedToHtmlForCreation(final HttpServletRequest httpServletRequest) {
		String s = "";

		// Start of user code "Init:derivedToHtmlForCreation(...)"
		// End of user code

		s = s + "<label for=\"derived\">derived: </LABEL>";

		// Start of user code "Mid:derivedToHtmlForCreation(...)"
		// End of user code

		// Start of user code "Finalize:derivedToHtmlForCreation(...)"
		// End of user code

		return s;
	}

	static public String derivedToHtmlForCreation1(final HttpServletRequest httpServletRequest, final String id) {
		String s = "";

		// Start of user code "Init:derivedToHtmlForCreation1(...final String
		// id)"
		// End of user code

		s = s + "<label for=\"derived\">derived: </LABEL>";

		// Start of user code "Mid:derivedToHtmlForCreation1(...final String
		// id)"
		// End of user code
		s = s + "<input name=\"derived\" type=\"text\" style=\"width: 400px\" id=\"derived\" >";
		// Start of user code "Finalize:derivedToHtmlForCreation1(...final
		// String id)"
		// End of user code

		return s;
	}

	public String elaboratedByToHtml() {
		String s = "";

		// Start of user code elaboratedBytoHtml_init
		// End of user code

		s = s + "<label for=\"elaboratedBy\"><strong>elaboratedBy</strong>: </LABEL>";

		// Start of user code elaboratedBytoHtml_mid
		// End of user code

/*		try {
			s = s + "<ul>";
			Iterator<Link> itr = elaboratedBy.iterator();
			while (itr.hasNext()) {
				s = s + "<li>";
				if (itr.next().getValue() == null) {
					s = s + "<em>null</em>";
				} else {
					s = s + itr.next().getValue().toString();
				}
				s = s + "</li>";
			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		
		try {
			s = s + "<ul>";
			if (!elaboratedBy.isEmpty()) {
				for (Link l : elaboratedBy) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code elaboratedBytoHtml_finalize
		// End of user code

		return s;
	}

	public String elaboratesToHtml() {
		String s = "";

		// Start of user code elaboratestoHtml_init
		// End of user code

		s = s + "<label for=\"elaborates\"><strong>elaborates</strong>: </LABEL>";

		// Start of user code elaboratestoHtml_mid
		// End of user code

/*		try {
			s = s + "<ul>";
			Iterator<Link> itr = elaborates.iterator();
			while (itr.hasNext()) {
				s = s + "<li>";
				if (itr.next().getValue() == null) {
					s = s + "<em>null</em>";
				} else {
					s = s + itr.next().getValue().toString();
				}
				s = s + "</li>";
			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		
		try {
			s = s + "<ul>";
			if (!elaborates.isEmpty()) {
				for (Link l : elaborates) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code elaboratestoHtml_finalize
		// End of user code

		return s;
	}

	public String specifiedByToHtml() {
		String s = "";

		// Start of user code specifiedBytoHtml_init
		// End of user code

		s = s + "<label for=\"specifiedBy\"><strong>specifiedBy</strong>: </LABEL>";

		// Start of user code specifiedBytoHtml_mid
		// End of user code

/*		try {
			s = s + "<ul>";
			Iterator<Link> itr = specifiedBy.iterator();
			while (itr.hasNext()) {
				s = s + "<li>";
				if (itr.next().getValue() == null) {
					s = s + "<em>null</em>";
				} else {
					s = s + itr.next().getValue().toString();
				}
				s = s + "</li>";
			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		
		try {
			s = s + "<ul>";
			if (!specifiedBy.isEmpty()) {
				for (Link l : specifiedBy) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code specifiedBytoHtml_finalize
		// End of user code

		return s;
	}

	public String specifiesToHtml() {
		String s = "";

		// Start of user code specifiestoHtml_init
		// End of user code

		s = s + "<label for=\"specifies\"><strong>specifies</strong>: </LABEL>";

		// Start of user code specifiestoHtml_mid
		// End of user code

/*		try {
			s = s + "<ul>";
			Iterator<Link> itr = specifies.iterator();
			while (itr.hasNext()) {
				s = s + "<li>";
				if (itr.next().getValue() == null) {
					s = s + "<em>null</em>";
				} else {
					s = s + itr.next().getValue().toString();
				}
				s = s + "</li>";
			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		
		try {
			s = s + "<ul>";
			if (!specifies.isEmpty()) {
				for (Link l : specifies) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}


		// Start of user code specifiestoHtml_finalize
		// End of user code

		return s;
	}

	public String affectedByToHtml() {
		String s = "";

		// Start of user code affectedBytoHtml_init
		// End of user code

		s = s + "<label for=\"affectedBy\"><strong>affectedBy</strong>: </LABEL>";

		// Start of user code affectedBytoHtml_mid
		// End of user code

/*		try {
			s = s + "<ul>";
			Iterator<Link> itr = affectedBy.iterator();
			while (itr.hasNext()) {
				s = s + "<li>";
				if (itr.next().getValue() == null) {
					s = s + "<em>null</em>";
				} else {
					s = s + itr.next().getValue().toString();
				}
				s = s + "</li>";
			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		
		try {
			s = s + "<ul>";
			if (!affectedBy.isEmpty()) {
				for (Link l : affectedBy) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}


		// Start of user code affectedBytoHtml_finalize
		// End of user code

		return s;
	}

	public String trackedByToHtml() {
		String s = "";

		// Start of user code trackedBytoHtml_init
		// End of user code

		s = s + "<label for=\"trackedBy\"><strong>trackedBy</strong>: </LABEL>";

		// Start of user code trackedBytoHtml_mid
		// End of user code

/*		try {
			s = s + "<ul>";
			Iterator<Link> itr = trackedBy.iterator();
			while (itr.hasNext()) {
				s = s + "<li>";
				if (itr.next().getValue() == null) {
					s = s + "<em>null</em>";
				} else {
					s = s + itr.next().getValue().toString();
				}
				s = s + "</li>";
			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		
		try {
			s = s + "<ul>";
			if (!trackedBy.isEmpty()) {
				for (Link l : trackedBy) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code trackedBytoHtml_finalize
		// End of user code

		return s;
	}

	public String implementedByToHtml() {
		String s = "";

		// Start of user code implementedBytoHtml_init
		// End of user code

		s = s + "<label for=\"implementedBy\"><strong>implementedBy</strong>: </LABEL>";

		// Start of user code implementedBytoHtml_mid
		// End of user code

/*		try {
			s = s + "<ul>";
			Iterator<Link> itr = implementedBy.iterator();
			while (itr.hasNext()) {
				s = s + "<li>";
				if (itr.next().getValue() == null) {
					s = s + "<em>null</em>";
				} else {
					s = s + itr.next().getValue().toString();
				}
				s = s + "</li>";
			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		
		try {
			s = s + "<ul>";
			if (!implementedBy.isEmpty()) {
				for (Link l : implementedBy) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code implementedBytoHtml_finalize
		// End of user code

		return s;
	}

	public String validatedByToHtml() {
		String s = "";

		// Start of user code validatedBytoHtml_init
		// End of user code

		s = s + "<label for=\"validatedBy\"><strong>validatedBy</strong>: </LABEL>";

		// Start of user code validatedBytoHtml_mid
		// End of user code

/*		try {
			s = s + "<ul>";
			Iterator<Link> itr = validatedBy.iterator();
			while (itr.hasNext()) {
				s = s + "<li>";
				if (itr.next().getValue() == null) {
					s = s + "<em>null</em>";
				} else {
					s = s + itr.next().getValue().toString();
				}
				s = s + "</li>";
			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		
		try {
			s = s + "<ul>";
			if (!validatedBy.isEmpty()) {
				for (Link l : validatedBy) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code validatedBytoHtml_finalize
		// End of user code

		return s;
	}

	public String satisfiedByToHtml() {
		String s = "";

		// Start of user code satisfiedBytoHtml_init
		// End of user code

		s = s + "<label for=\"satisfiedBy\"><strong>satisfiedBy</strong>: </LABEL>";

		// Start of user code satisfiedBytoHtml_mid
		// End of user code

		try {
			s = s + "<ul>";
			if (!satisfiedBy.isEmpty()) {
				for (Link l : satisfiedBy) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}
		

		// Start of user code satisfiedBytoHtml_finalize
		// End of user code

		return s;
	}

	public String satisfiesToHtml() {
		String s = "";

		// Start of user code satisfiestoHtml_init
		// End of user code

		s = s + "<label for=\"satisfies\"><strong>satisfies</strong>: </LABEL>";

		// Start of user code satisfiestoHtml_mid
		// End of user code

/*		try {
			s = s + "<ul>";
			Iterator<Link> itr = satisfies.iterator();
			while (itr.hasNext()) {
				s = s + "<li>";
				if (itr.next().getValue() == null) {
					s = s + "<em>null</em>";
				} else {
					s = s + itr.next().getValue().toString();
				}
				s = s + "</li>";
			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}*/

		
		try {
			s = s + "<ul>";
			if (!satisfies.isEmpty()) {
				for (Link l : satisfies) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		// Start of user code satisfiestoHtml_finalize
		// End of user code

		return s;
	}

	public String decomposedByToHtml() {
		String s = "";

		// Start of user code decomposedBytoHtml_init
		// End of user code

		s = s + "<label for=\"decomposedBy\"><strong>decomposedBy</strong>: </LABEL>";

		// Start of user code decomposedBytoHtml_mid
		// End of user code

/*		try {
			s = s + "<ul>";
			Iterator<Link> itr = decomposedBy.iterator();
			while (itr.hasNext()) {
				s = s + "<li>";
				if (itr.next().getValue() == null) {
					s = s + "<em>null</em>";
				} else {
					s = s + itr.next().getValue().toString();
				}
				s = s + "</li>";
			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		
		try {
			s = s + "<ul>";
			if (!decomposedBy.isEmpty()) {
				for (Link l : decomposedBy) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code decomposedBytoHtml_finalize
		// End of user code

		return s;
	}

	public String decomposesToHtml() {
		String s = "";

		// Start of user code decomposestoHtml_init
		// End of user code

		s = s + "<label for=\"decomposes\"><strong>decomposes</strong>: </LABEL>";

		// Start of user code decomposestoHtml_mid
		// End of user code

/*		try {
			s = s + "<ul>";
			Iterator<Link> itr = decomposes.iterator();
			while (itr.hasNext()) {
				s = s + "<li>";
				if (itr.next().getValue() == null) {
					s = s + "<em>null</em>";
				} else {
					s = s + itr.next().getValue().toString();
				}
				s = s + "</li>";
			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		
		try {
			s = s + "<ul>";
			if (!decomposes.isEmpty()) {
				for (Link l : decomposes) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code decomposestoHtml_finalize
		// End of user code

		return s;
	}

	public String constrainedByToHtml() {
		String s = "";

		// Start of user code constrainedBytoHtml_init
		// End of user code

		s = s + "<label for=\"constrainedBy\"><strong>constrainedBy</strong>: </LABEL>";

		// Start of user code constrainedBytoHtml_mid
		// End of user code

/*		try {
			s = s + "<ul>";
			Iterator<Link> itr = constrainedBy.iterator();
			while (itr.hasNext()) {
				s = s + "<li>";
				if (itr.next().getValue() == null) {
					s = s + "<em>null</em>";
				} else {
					s = s + itr.next().getValue().toString();
				}
				s = s + "</li>";
			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		
		try {
			s = s + "<ul>";
			if (!constrainedBy.isEmpty()) {
				for (Link l : constrainedBy) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code constrainedBytoHtml_finalize
		// End of user code

		return s;
	}

	public String constrainsToHtml() {
		String s = "";

		// Start of user code constrainstoHtml_init
		// End of user code

		s = s + "<label for=\"constrains\"><strong>constrains</strong>: </LABEL>";

		// Start of user code constrainstoHtml_mid
		// End of user code

		/*
		 * try { s = s + "<ul>"; Iterator<Link> itr = constrains.iterator();
		 * while (itr.hasNext()) { s = s + "<li>"; if (itr.next().getValue() ==
		 * null) { s = s + "<em>null</em>"; } else { s = s +
		 * itr.next().getValue().toString(); } s = s + "</li>"; } s = s +
		 * "</ul>"; } catch (Exception e) { e.printStackTrace(); }
		 */

		try {
			s = s + "<ul>";
			if (!constrains.isEmpty()) {
				for (Link l : constrains) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code constrainstoHtml_finalize
		// End of user code

		return s;
	}

	public String titleToHtml() {
		String s = "";

		// Start of user code titletoHtml_init
		// End of user code

		s = s + "<label for=\"title\"><strong>title</strong>: </LABEL>";

		// Start of user code titletoHtml_mid
		// End of user code

		try {
			if (title == null) {
				s = s + "<em>null</em>";
			} else {
				s = s + title.toString();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code titletoHtml_finalize
		// End of user code

		return s;
	}

	public String descriptionToHtml() {
		String s = "";

		// Start of user code descriptiontoHtml_init
		// End of user code

		s = s + "<label for=\"description\"><strong>description</strong>: </LABEL>";

		// Start of user code descriptiontoHtml_mid
		// End of user code

		try {
			if (description == null) {
				s = s + "<em>null</em>";
			} else {
				s = s + description.toString();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code descriptiontoHtml_finalize
		// End of user code

		return s;
	}

	public String identifierToHtml() {
		String s = "";

		// Start of user code identifiertoHtml_init
		// End of user code

		s = s + "<label for=\"identifier\"><strong>identifier</strong>: </LABEL>";

		// Start of user code identifiertoHtml_mid
		// End of user code

		try {
			if (identifier == null) {
				s = s + "<em>null</em>";
			} else {
				s = s + identifier.toString();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code identifiertoHtml_finalize
		// End of user code

		return s;
	}

	public String shortTitleToHtml() {
		String s = "";

		// Start of user code shortTitletoHtml_init
		// End of user code

		s = s + "<label for=\"shortTitle\"><strong>shortTitle</strong>: </LABEL>";

		// Start of user code shortTitletoHtml_mid
		// End of user code

		try {
			if (shortTitle == null) {
				s = s + "<em>null</em>";
			} else {
				s = s + shortTitle.toString();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code shortTitletoHtml_finalize
		// End of user code

		return s;
	}

	public String subjectToHtml() {
		String s = "";

		// Start of user code subjecttoHtml_init
		// End of user code

		s = s + "<label for=\"subject\"><strong>subject</strong>: </LABEL>";

		// Start of user code subjecttoHtml_mid
		// End of user code

		/*
		 * try { s = s + "<ul>"; Iterator<String> itr = subject.iterator();
		 * while (itr.hasNext()) { s = s + "<li>"; s = s +
		 * itr.next().toString(); s = s + "</li>"; } s = s + "</ul>"; } catch
		 * (Exception e) { e.printStackTrace(); }
		 */

		try {
			s = s + "<ul>";
			if (!subject.isEmpty()) {
				for (String p : subject) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + p;
					s = s + '"' + ">" + p + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code subjecttoHtml_finalize
		// End of user code

		return s;
	}

	public String creatorToHtml() {
		String s = "";

		// Start of user code creatortoHtml_init
		// End of user code

		s = s + "<label for=\"creator\"><strong>creator</strong>: </LABEL>";

		// Start of user code creatortoHtml_mid
		// End of user code

		/*
		 * try { s = s + "<ul>"; Iterator<Person> itr = creator.iterator();
		 * while (itr.hasNext()) { s = s + "<li>"; s = s +
		 * itr.next().toHtml(true); s = s + "</li>"; } s = s + "</ul>"; } catch
		 * (Exception e) { e.printStackTrace(); }
		 */

		try {
			s = s + "<ul>";
			if (!creator.isEmpty()) {
				for (Person p : creator) {
					s = s + "<li>";
					s = s + p.toHtml();
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code creatortoHtml_finalize
		// End of user code

		return s;
	}

	public String contributorToHtml() {
		String s = "";

		// Start of user code contributortoHtml_init
		// End of user code

		s = s + "<label for=\"contributor\"><strong>contributor</strong>: </LABEL>";

		// Start of user code contributortoHtml_mid
		// End of user code

		/*
		 * try { s = s + "<ul>"; Iterator<Person> itr = contributor.iterator();
		 * while (itr.hasNext()) { s = s + "<li>"; s = s +
		 * itr.next().toHtml(true); s = s + "</li>"; } s = s + "</ul>"; } catch
		 * (Exception e) { e.printStackTrace(); }
		 */

		try {
			s = s + "<ul>";
			if (!contributor.isEmpty()) {
				for (Person p : contributor) {
					s = s + "<li>";
					s = s + p.toHtml();
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code contributortoHtml_finalize
		// End of user code

		return s;
	}

	public String createdToHtml() {
		String s = "";

		// Start of user code createdtoHtml_init
		// End of user code

		s = s + "<label for=\"created\"><strong>created</strong>: </LABEL>";

		// Start of user code createdtoHtml_mid
		// End of user code

		try {
			if (created == null) {
				s = s + "<em>null</em>";
			} else {
				s = s + created.toString();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code createdtoHtml_finalize
		// End of user code

		return s;
	}

	public String modifiedToHtml() {
		String s = "";

		// Start of user code modifiedtoHtml_init
		// End of user code

		s = s + "<label for=\"modified\"><strong>modified</strong>: </LABEL>";

		// Start of user code modifiedtoHtml_mid
		// End of user code

		try {
			if (modified == null) {
				s = s + "<em>null</em>";
			} else {
				s = s + modified.toString();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code modifiedtoHtml_finalize
		// End of user code

		return s;
	}

	public String typeToHtml() {
		String s = "";

		// Start of user code typetoHtml_init
		// End of user code

		s = s + "<label for=\"type\"><strong>type</strong>: </LABEL>";

		// Start of user code typetoHtml_mid
		// End of user code

		try {
			s = s + "<ul>";
			if (!type.isEmpty()) {
				for (Type t : type) {
					s = s + "<li>";
					s = s + t.toHtml();
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code typetoHtml_finalize
		// End of user code

		return s;
	}

	public String serviceProviderToHtml() {
		String s = "";

		// Start of user code serviceProvidertoHtml_init
		// End of user code

		s = s + "<label for=\"serviceProvider\"><strong>serviceProvider</strong>: </LABEL>";

		// Start of user code serviceProvidertoHtml_mid
		// End of user code

		try {
			if (serviceProvider == null) {
				s = s + "<em>null</em>";
			} else {
				s = s + "<a href=" + '"';
				s = s + serviceProvider.toString();
				s = s + '"' + ">" + serviceProvider.toString() + "</a>";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code serviceProvidertoHtml_finalize
		// End of user code

		return s;
	}

	public String instanceShapeToHtml() {
		String s = "";

		// Start of user code instanceShapetoHtml_init
		// End of user code

		s = s + "<label for=\"instanceShape\"><strong>instanceShape</strong>: </LABEL>";

		// Start of user code instanceShapetoHtml_mid
		// End of user code

		try {
			if (instanceShape.getValue() == null) {
				s = s + "<em>null</em>";
			} else {
				s = s + "<a href=" + '"';
				s = s + instanceShape.getValue().toString();
				s = s + '"' + ">" + instanceShape.getValue().toString() + "</a>";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code instanceShapetoHtml_finalize
		// End of user code

		return s;
	}

	public String verifiedByToHtml() {
		String s = "";

		// Start of user code verifiedBytoHtml_init
		// End of user code

		s = s + "<label for=\"verifiedBy\"><strong>verifiedBy</strong>: </LABEL>";

		// Start of user code verifiedBytoHtml_mid
		// End of user code

		try {
			s = s + "<ul>";
			if (!verifiedBy.isEmpty()) {
				for (Link l : verifiedBy) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code verifiedBytoHtml_finalize
		// End of user code

		return s;
	}

	public String tracedToToHtml() {
		String s = "";

		// Start of user code tracedTotoHtml_init
		// End of user code

		s = s + "<label for=\"tracedTo\"><strong>tracedTo</strong>: </LABEL>";

		// Start of user code tracedTotoHtml_mid
		// End of user code

		try {
			s = s + "<ul>";
			if (!tracedTo.isEmpty()) {
				for (Link l : tracedTo) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code tracedTotoHtml_finalize
		// End of user code

		return s;
	}

	public String refinedByToHtml() {
		String s = "";

		// Start of user code refinedBytoHtml_init
		// End of user code

		s = s + "<label for=\"refinedBy\"><strong>refinedBy</strong>: </LABEL>";

		// Start of user code refinedBytoHtml_mid
		// End of user code

		try {
			s = s + "<ul>";
			if (!refinedBy.isEmpty()) {
				for (Link l : refinedBy) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code refinedBytoHtml_finalize
		// End of user code

		return s;
	}

	public String masterToHtml() {
		String s = "";

		// Start of user code derivedFromtoHtml_init
		// End of user code

		s = s + "<label for=\"master\"><strong>master</strong>: </LABEL>";

		// Start of user code derivedFromtoHtml_mid
		// End of user code

		try {
			s = s + "<ul>";
			if (!master.isEmpty()) {
				for (Link l : master) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code derivedFromtoHtml_finalize
		// End of user code

		return s;
	}
	
	public String derivedFromToHtml() {
		String s = "";

		// Start of user code derivedFromtoHtml_init
		// End of user code

		s = s + "<label for=\"derivedFrom\"><strong>derivedFrom</strong>: </LABEL>";

		// Start of user code derivedFromtoHtml_mid
		// End of user code

		try {
			s = s + "<ul>";
			if (!derivedFrom.isEmpty()) {
				for (Link l : derivedFrom) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code derivedFromtoHtml_finalize
		// End of user code

		return s;
	}

	public String derivedToHtml() {
		String s = "";

		// Start of user code derivedtoHtml_init
		// End of user code

		s = s + "<label for=\"derived\"><strong>derived</strong>: </LABEL>";

		// Start of user code derivedtoHtml_mid
		// End of user code

		try {
			s = s + "<ul>";
			if (!derived.isEmpty()) {
				for (Link l : derived) {
					s = s + "<li>";
					s = s + "<a href=" + '"';
					s = s + l.getValue();
					s = s + '"' + ">" + l.getValue() + "</a>";
					s = s + "</li>";
				}

			}
			s = s + "</ul>";
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Start of user code derivedtoHtml_finalize
		// End of user code

		return s;
	}
}
