/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package hu.bme.mit.papyrus.oslc.adaptor;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.ServletContextEvent;
import java.util.List;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import hu.bme.mit.papyrus.oslc.adaptor.servlet.ServiceProviderCatalogSingleton;
import hu.bme.mit.papyrus.oslc.adaptor.util.CSVReader;
import hu.bme.mit.papyrus.oslc.adaptor.ServiceProviderInfo;
import hu.bme.mit.papyrus.oslc.adaptor.data.Requirements;
import hu.bme.mit.papyrus.oslc.adaptor.resources.Person;
import hu.bme.mit.papyrus.oslc.adaptor.resources.Requirement;
import hu.bme.mit.papyrus.oslc.adaptor.resources.Type;

// Start of user code imports
import java.util.ArrayList;
import java.io.IOException;
import java.net.URISyntaxException;
// End of user code

// Start of user code pre_class_code
// End of user code

public class PapyrusRequirementProviderManager {

	// Start of user code class_attributes
	// End of user code
	
	// Start of user code class_methods
	// End of user code

    public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent)
    {
		// TODO Implement code to establish connection to data backbone etc ...
		// Start of user code contextInitializeServletListener

		CSVReader reader = new CSVReader();
		CSVReader.refreshRequirements();
		Requirements.init();
		new Thread(reader).start();

		// End of user code
    }

	public static void contextDestroyServletListener(ServletContextEvent servletContextEvent) 
	{
		// TODO Implement code to shutdown connections to data backbone etc...
		// Start of user code contextDestroyed
		// End of user code
	}

    public static ServiceProviderInfo[] getServiceProviderInfos(HttpServletRequest httpServletRequest)
    {
		ServiceProviderInfo[] serviceProviderInfos = {};
		// TODO Implement code to return the set of ServiceProviders
		// Start of user code "ServiceProviderInfo[] getServiceProviderInfos(...)"
		final List<ServiceProviderInfo> infos = new ArrayList<ServiceProviderInfo>();
        final ServiceProviderInfo serviceProviderInfo = new ServiceProviderInfo();
        serviceProviderInfo.name = "Requirement Service Provider";
        serviceProviderInfo.id = "RequirementServiceProvider";
        infos.add(serviceProviderInfo);
        
        serviceProviderInfos = infos.toArray(new ServiceProviderInfo[infos.size()]);
		// End of user code
		return serviceProviderInfos;
    }

    public static List<Requirement> queryRequirements(HttpServletRequest httpServletRequest, final String id, String where, int page, int limit)
    {
		List<Requirement> resources = null;
		// TODO Implement code to return a set of resources
		resources = Requirements.getRequirements();
		// Start of user code queryRequirements
		// End of user code
		return resources;
    }
	public static Requirement createRequirement(HttpServletRequest httpServletRequest, final Requirement aResource, final String id)
    {
		Requirement newResource = null;
		// TODO Implement code to create a resource
		
		// Start of user code createRequirement
		// End of user code
		return newResource;
    }

	public static String getETagFromRequirement(final Requirement aResource)
    {
		String eTag = null;
		// TODO Implement code to return an ETag for a particular resource
		// Start of user code getETagFromRequirement
		// End of user code
		return eTag;
    }
	public static Requirement getRequirement(HttpServletRequest httpServletRequest, final String id, final String requirementId)
    {
		Requirement aResource = null;
		// TODO Implement code to return a resource
		for(Requirement r: Requirements.getRequirements()){
			if(r.getIdentifier().equals(requirementId)){
				aResource= r;
				return aResource;
			}
		}
		// Start of user code getRequirement
		// End of user code
		return null;
    }
}
