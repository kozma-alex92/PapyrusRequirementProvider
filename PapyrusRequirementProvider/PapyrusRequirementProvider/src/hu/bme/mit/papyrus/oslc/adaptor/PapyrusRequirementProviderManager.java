/*******************************************************************************
 * Copyright (c) 2011, 2012 IBM Corporation and others.
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *  
 *  The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 *  and the Eclipse Distribution License is available at
 *  http://www.eclipse.org/org/documents/edl-v10.php.
 *  
 *  Contributors:
 *  
 *	   Sam Padgett	       - initial API and implementation
 *     Michael Fiedler     - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (https://bugs.eclipse.org/bugs/show_bug.cgi?id=422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/

package hu.bme.mit.papyrus.oslc.adaptor;

import javax.servlet.http.HttpServletRequest;



import javax.servlet.ServletContextEvent;

import java.lang.reflect.Field;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.LinkedHashMap;
import java.util.List;

import org.eclipse.lyo.oslc4j.core.model.ServiceProvider;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;

import hu.bme.mit.papyrus.oslc.adaptor.servlet.ServiceProviderCatalogSingleton;
import hu.bme.mit.papyrus.oslc.adaptor.util.CSVReader;
import hu.bme.mit.papyrus.oslc.adaptor.util.ConfigProperties;
import hu.bme.mit.papyrus.oslc.adaptor.util.QueryHelper;
import hu.bme.mit.papyrus.oslc.adaptor.util.WhereParam;
import hu.bme.mit.papyrus.oslc.adaptor.ServiceProviderInfo;
import hu.bme.mit.papyrus.oslc.adaptor.data.Requirements;
import hu.bme.mit.papyrus.oslc.adaptor.resources.Person;
import hu.bme.mit.papyrus.oslc.adaptor.resources.Requirement;
import hu.bme.mit.papyrus.oslc.adaptor.resources.RequirementCollection;
import hu.bme.mit.papyrus.oslc.adaptor.util.CSVWriter;
import hu.bme.mit.papyrus.oslc.adaptor.resources.Type;

// Start of user code imports
// End of user code

// Start of user code pre_class_code
// End of user code

public class PapyrusRequirementProviderManager {

	// Start of user code class_attributes
	// End of user code

	// Start of user code class_methods
	// End of user code

	public static void contextInitializeServletListener(final ServletContextEvent servletContextEvent) {
		// TODO Implement code to establish connection to data backbone etc ...
		// Start of user code contextInitializeServletListener
		ConfigProperties.initProperties();
		CSVReader reader = new CSVReader();
		CSVReader.refreshRequirements();
		//Requirements.init();
		new Thread(reader).start();
		// End of user code
	}

	public static void contextDestroyServletListener(ServletContextEvent servletContextEvent) {
		// TODO Implement code to shutdown connections to data backbone etc...
		// Start of user code contextDestroyed
		// End of user code
	}

	public static ServiceProviderInfo[] getServiceProviderInfos(HttpServletRequest httpServletRequest) {
		ServiceProviderInfo[] serviceProviderInfos = {};
		// TODO Implement code to return the set of ServiceProviders
		// Start of user code "ServiceProviderInfo[]
		// getServiceProviderInfos(...)"
		final List<ServiceProviderInfo> infos = new ArrayList<ServiceProviderInfo>();
		final ServiceProviderInfo serviceProviderInfo = new ServiceProviderInfo();
		serviceProviderInfo.name = "Requirement Service Provider";
		serviceProviderInfo.id = "Provider";
		infos.add(serviceProviderInfo);

		serviceProviderInfos = infos.toArray(new ServiceProviderInfo[infos.size()]);
		// End of user code
		return serviceProviderInfos;
	}

	public static List<Requirement> queryRequirements(HttpServletRequest httpServletRequest, final String id,
			String where, int page, int limit) {
		List<Requirement> resources = new ArrayList<Requirement>();
		// TODO Implement code to return a set of resources
		ArrayList<WhereParam> whereParams = QueryHelper.getWhereParams(where);
		for (Requirement req : Requirements.getRequirements()) {
			if(req.matches(whereParams)){
				resources.add(req);
			}
		}
		// Start of user code queryRequirements
		// End of user code
		return resources;
	}

	public static List<RequirementCollection> queryRequirementCollections(HttpServletRequest httpServletRequest,
			final String id, String where, int page, int limit) {
		List<RequirementCollection> resources = null;
		// TODO Implement code to return a set of resources
		resources = Requirements.getRequirementCollections();
		// Start of user code queryRequirementCollections
		// End of user code
		return resources;
	}

	public static List<Requirement> RequirementSelector(HttpServletRequest httpServletRequest, final String id,
			String terms) {
		List<Requirement> resources = null;
		// TODO Implement code to return a set of resources, based on search
		// criteria
		// Start of user code RequirementSelector
		resources = new ArrayList<Requirement>();
		for (Requirement r : Requirements.getRequirements()) {
			if (r.getDescription().contains(terms) || r.getTitle().contains(terms)) {
				resources.add(r);
			}
		}
		// End of user code
		return resources;
	}

	public static List<RequirementCollection> RequirementCollectionSelector(HttpServletRequest httpServletRequest,
			final String id, String terms) {
		List<RequirementCollection> resources = null;
		// TODO Implement code to return a set of resources, based on search
		// criteria
		// Start of user code RequirementCollectionSelector
		resources = new ArrayList<RequirementCollection>();
		for (RequirementCollection r : Requirements.getRequirementCollections()) {
			boolean matches = false;
			for (Link l : r.getUses()) {
				Requirement req = Requirements.getRequirementByAbout(l.getValue());
				if (req.getTitle().contains(terms) || req.getDescription().contains(terms)) {
					matches = true;
				}
			}
			if (matches)
				resources.add(r);
		}
		// End of user code
		return resources;
	}

	public static Requirement createRequirement(HttpServletRequest httpServletRequest, final Requirement aResource,
			final String id) {
		Requirement newResource = null;
		// TODO Implement code to create a resource
		
		LinkedHashMap<String, String> keyValues = new LinkedHashMap<String, String>();
		
		ArrayList<String> usedProperties = new ArrayList<String>();
		
		Enumeration<String> props = httpServletRequest.getParameterNames();
		
		while(props.hasMoreElements()){
			String propName = props.nextElement();
			keyValues.put(propName, httpServletRequest.getParameter(propName));
		}
		for(String s: keyValues.keySet()){
			if(!keyValues.get(s).equals("")){
				usedProperties.add(s);
			}
		}
		
		//newResource = new Requirement(aResource);
		ArrayList<String> properties = new ArrayList<String>();
		for(Field f: Requirement.class.getDeclaredFields()){
			properties.add(f.getName());
		}
		
		newResource = new Requirement(aResource, properties, usedProperties);
		
		Requirements.getRequirements().add(newResource);



		//System.out.println(Requirements.getRequirements());
		CSVWriter.writeToFile();
	
		// Start of user code createRequirement
		// End of user code
		return newResource;
	}

	public static String getETagFromRequirement(final Requirement aResource) {
		String eTag = null;
		// TODO Implement code to return an ETag for a particular resource
		// Start of user code getETagFromRequirement
		// End of user code
		return eTag;
	}

	public static Requirement getRequirement(HttpServletRequest httpServletRequest, final String id,
			final String requirementId, final String properties) {
		Requirement aResource = null;
		// TODO Implement code to return a resource
		QueryHelper.getPropertyParams(properties);
		for (Requirement r : Requirements.getRequirements()) {
			if (r.getIdentifier().equals(requirementId)) {
				aResource = r;
				if(properties!=null){
					aResource = new Requirement(aResource, QueryHelper.propertyParams);
				}
				return aResource;
			}
		}

		// Start of user code getRequirement
		// End of user code
		return aResource;
	}

	public static RequirementCollection getRequirementCollection(HttpServletRequest httpServletRequest, final String id,
			final String requirementCollectionId) {
		RequirementCollection aResource = null;
		// TODO Implement code to return a resource
		for (RequirementCollection r : Requirements.getRequirementCollections()) {
			if (r.getIdentifier().equals(requirementCollectionId)) {
				aResource = r;
				return aResource;
			}
		}
		// Start of user code getRequirementCollection
		// End of user code
		return aResource;
	}
}
